1. Sort Descending Method:
Purpose:
 Sorts an array of integers in descending order using the bubble sort algorithm.
Method Signature:
public void sortDescending(int[] array) 
Parameters:
•	Array: An array of integers to be sorted in descending order.
Returns:
•	void: The method sorts the input array in place and doesn't return any value.
Usage:
int[] myArray = {5, 2, 8, 1, 7};
sortDescending(myArray);

2. calculate statistics Method:
Purpose: Calculates statistical measures (median, variance, standard deviation, and sum of squares) for an array of integers.
Method Signature:
public double[] calculateStatistics(int[] data) 
Parameters:
•	Data: An array of integers for which statistical measures are to be calculated.
Returns:
•	Double[]: An array containing the calculated statistics in the order [median, variance, standard deviation, sum of squares].
Usage:
int[] myData = {2, 4, 6, 8, 10};
 double[] stats = calculateStatistics(myData); 

3. Matrix Multiplication Method:
Purpose:
 Performs matrix multiplication for two given matrices.
Method Signature:
public int[][] matrixMultiplication(int[][] matrixA, int[][] matrixB, int rowsA, int columnsA, int columnsB) 
Parameters:
•	matrixA: First matrix for multiplication.
•	matrixB: Second matrix for multiplication.
•	rowsA: Number of rows in matrixA.
•	columnsA: Number of columns in matrixA (must be equal to the number of rows in matrixB).
•	columnsB: Number of columns in matrixB.
Returns:
•	int[][]: Resultant matrix after multiplication.
Usage:
int[][] matrixA = {{1, 2}, {3, 4}};
 int[][] matrixB = {{5, 6}, {7, 8}};
 int[][] result = matrixMultiplication(matrixA, matrixB, 2, 2, 2); 

